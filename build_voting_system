pragma solidity >=0.7.0 < 0.9.0;

contract Ballot{

    //VARIABLES
    struct vote {
        address voterAddress;
        bool choice;
    }

    struct voter {
        string voterName;
        bool voted;

    }
    //count votes make sure it's private
    uint private countResult = 0;
    uint public finalResult = 0;
    uint public totalVoters = 0;
    uint public totalVotes = 0;

    address public ballotOfficialAddress;
    string public ballotOfficialName;
    string public proposal;

    //mapping is like dictionary the address is link to voters when queried returns voterName and voted
    mapping(uint => vote) private votes;
    mapping(address => voter) public voterRegistry;

    enum State { Created, Voting, Ended }
    State public state;

    //MODIFIERS checking conditions before executing functions

    modifier condition(bool _condition){
        require(_condition);
        _;
    }

    //whoever is calling the function needs to be the ballotOfficial
    modifier onlyOfficial(){
        require(msg.sender == ballotOfficialAddress);
        _;
    }

    //state of the contract to equal the function _state
    modifier inState(State _state){
        require(state == _state);
        _;
    }

    //EVENTS

    //FUNCTIONS
    //only one is allowed helps initialise the contract state, needs to enter the 2 values before it begins
    constructor(
        string memory _ballotOfficialName,
        string memory _proposal
    )
    {
        ballotOfficialAddress = msg.sender;
        ballotOfficialName = _ballotOfficialName;
        proposal = _proposal;

        state = State.Created;

    }

    function addVoter(address _voterAddress, string memory _voterName) public inState(State.Created) onlyOfficial {
        voter memory v;
        v.voterName = _voterName;
        v.voted = false; //have not voted
        voterRegistry[_voterAddress] = v;
        totalVoters++;
    }

    function startVote() public inState(State.Created) onlyOfficial {
        //changing the state of votes therefore cannot add more voters
        state = State.Voting;
    }

    function doVote(bool _choice) public inState(State.Voting) returns (bool voted) {

        bool found = false;

        if(bytes(voterRegistry[msg.sender].voterName).length != 0
        && !voterRegistry[msg.sender].voted) {
            voterRegistry[msg.sender].voted = true;
            vote memory v;
            v.voterAddress = msg.sender;
            v.choice = _choice;
            if(_choice){
                countResult++;
            }
            votes[totalVotes] = v;
            totalVotes++;
            //mapping to voters address and their choice
            found = true;
        }   
        return found;
        
    }

    function endVote() public inState(State.Voting) onlyOfficial {
        //state needs to be voting before triggers to ended
        state = State.Ended;
        finalResult = countResult;

    }
}
